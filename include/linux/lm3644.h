#ifndef _LM3644_H
#define _LM3644_H

#define LM3644_DEV_NAME			"leds-lm3644"
#define LM3644_I2C_ADDR			(0x63)

/* Register table */
#define LM3644_REG_EN			(0x01)
#define LM3644_REG_IVFM			(0x02)
#define LM3644_REG_FLASH1_BR		(0x03)
#define LM3644_REG_FLASH2_BR		(0x04)
#define LM3644_REG_TORCH1_BR		(0x05)
#define LM3644_REG_TORCH2_BR		(0x06)
#define LM3644_REG_BOOST		(0x07)
#define LM3644_REG_TIME			(0x08)
#define LM3644_REG_TEMP			(0x09)
#define LM3644_REG_FLAG1		(0x0A)
#define LM3644_REG_FLAG2		(0x0B)
#define LM3644_REG_ID			(0x0C)
#define LM3644_REG_LAST_FLASH		(0x0D)

/* Enable Register - 0x01 */
#define REG_EN_MASK			GENMASK(7, 0)
#define REG_EN_TX_PIN_SHIFT		(7)
#define REG_EN_TX_PIN_MASK		BIT_MASK(REG_EN_TX_PIN_SHIFT)
#define REG_EN_TX_PIN_ENABLE		BIT(REG_EN_TX_PIN_SHIFT)
#define REG_EN_TX_PIN_DISABLE		(~REG_EN_TX_PIN_ENABLE & REG_EN_TX_PIN_MASK)
#define REG_EN_STB_TYPE_SHIFT		(6)
#define REG_EN_STB_TYPE_MASK		BIT_MASK(REG_EN_STB_TYPE_SHIFT)
#define REG_EN_STB_EDGE_TRIG		BIT(REG_EN_STB_TYPE_SHIFT)
#define REG_EN_STB_LVL_TRIG		(~REG_EN_STB_EDGE_TRIG & REG_EN_STB_TYPE_MASK)
#define REG_EN_STB_PIN_SHIFT		(5)
#define REG_EN_STB_PIN_MASK		BIT_MASK(REG_EN_STB_PIN_SHIFT)
#define REG_EN_STB_PIN_ENABLE		BIT(REG_EN_STB_PIN_SHIFT)
#define REG_EN_STB_PIN_DISABLE		(~REG_EN_STB_PIN_ENABLE & REG_EN_STB_PIN_MASK)
#define REG_EN_TORCH_PIN_SHIFT		(4)
#define REG_EN_TORCH_PIN_MASK		BIT_MASK(REG_EN_TORCH_PIN_SHIFT)
#define REG_EN_TORCH_PIN_ENABLE		BIT(REG_EN_TORCH_PIN_SHIFT)
#define REG_EN_TORCH_PIN_DISABLE	(~REG_EN_TORCH_PIN_ENABLE & REG_EN_TORCH_PIN_MASK)
#define REG_EN_MODE_SHIFT		(2)
#define REG_EN_MODE_MASK		GENMASK(REG_EN_MODE_SHIFT+1, REG_EN_MODE_SHIFT)
#define REG_EN_MODE(mode_select)	(((mode_select) << REG_EN_MODE_SHIFT) & REG_EN_MODE_MASK)
#define REG_EN_LED2_SHIFT		(1)
#define REG_EN_LED2_MASK		BIT_MASK(REG_EN_LED2_SHIFT)
#define REG_EN_LED2_ON			BIT(REG_EN_LED2_SHIFT)
#define REG_EN_LED2_OFF			(~REG_EN_LED2_ON & REG_EN_LED2_MASK)
#define REG_EN_LED1_SHIFT		(0)
#define REG_EN_LED1_MASK		BIT_MASK(REG_EN_LED1_SHIFT)
#define REG_EN_LED1_ON			BIT(REG_EN_LED1_SHIFT)
#define REG_EN_LED1_OFF			(~REG_EN_LED1_ON & REG_EN_LED1_MASK)

enum mode_select {
	MODE_STANDBY = 0,	//default
	MODE_IR,
	MODE_TORCH,
	MODE_FLASH,

	NUM_OF_MODE
};

/* IVFM Register - 0x02 */
#define REG_IVFM_MASK			GENMASK(6, 0)
#define REG_IVFM_UVLO_SHIFT		(6)
#define REG_IVFM_UVLO_MASK		BIT_MASK(REG_IVFM_UVLO_SHIFT)
#define REG_IVFM_UVLO_ENABLE		BIT(REG_IVFM_UVLO_SHIFT)
#define REG_IVFM_UVLO_DISABLE		(~REG_IVFM_UVLO_ENABLE & REG_IVFM_UVLO_MASK)
#define REG_IVFM_LEVEL_SHIFT		(3)
#define REG_IVFM_LEVEL_MASK		GENMASK(REG_IVFM_LEVEL_SHIFT+2, REG_IVFM_LEVEL_SHIFT)
#define REG_IVFM_LEVEL(level)		(((level) << REG_IVFM_LEVEL_SHIFT) & REG_IVFM_LEVEL_MASK)
#define REG_IVFM_HYS_SHIFT		(2)
#define REG_IVFM_HYS_MASK		BIT_MASK(REG_IVFM_HYS_SHIFT)
#define REG_IVFM_HYS_50MV		BIT(REG_IVFM_HYS_SHIFT)
#define REG_IVFM_HYS_0MV		(~REG_IVFM_HYS_50MV & REG_IVFM_HYS_MASK)
#define REG_IVFM_SELECT_SHIFT		(0)
#define REG_IVFM_SELECT_MASK		GENMASK(REG_IVFM_SELECT_SHIFT+1, REG_IVFM_SELECT_SHIFT)
#define REG_IVFM_SELECT(select)		(((select) << REG_IVFM_SELECT_SHIFT) & REG_IVFM_SELECT_MASK)

enum ivfm_level {
	IVFM_2900MV = 0,	//default
	IVFM_3000MV,
	IVFM_3100MV,
	IVFM_3200MV,
	IVFM_3300MV,
	IVFM_3400MV,
	IVFM_3500MV,
	IVFM_3600MV,

	NUM_OF_IVFM_LEVEL
};

enum ivfm_selection {
	IVFM_DISABL = 0,
	IVFM_STOP_N_HOLD,
	IVFM_DOWN,
	IVFM_UP_N_DOWN,

	NUM_OF_IVFM_SEL
};

const unsigned int ivfm_levels_mv[NUM_OF_IVFM_LEVEL] = {
	2900, 3000, 3100, 3200, 3300, 3400, 3500, 3600
};

/* LED1 Flash Brightness Register - 0x03 */
#define REG_FLASH1_BR_MASK		GENMASK(7, 0)
#define REG_FLASH1_BR_OVERRIDE_SHIFT	(7)
#define REG_FLASH1_BR_OVERRIDE_MASK	BIT_MASK(REG_FLASH1_BR_OVERRIDE_SHIFT)
#define REG_FLASH1_BR_OVERRIDE_ENABLE	BIT(REG_FLASH1_BR_OVERRIDE_SHIFT)
#define REG_FLASH1_BR_OVERRIDE_DISABLE	(~REG_FLASH1_BR_OVERRIDE_ENABLE & REG_FLASH1_BR_OVERRIDE_MASK)
#define REG_FLASH1_BR_LVL_SHIFT		(0)
#define REG_FLASH1_BR_LVL_MASK		GENMASK(REG_FLASH1_BR_LVL_SHIFT+6, REG_FLASH1_BR_LVL_SHIFT)
#define REG_FLASH1_BR_LVL(lvl)		(((lvl) << REG_FLASH1_BR_LVL_SHIFT) & REG_FLASH1_BR_LVL_MASK)
	//Current method:
	//10.9mA~1500mA
	//mA ~= ((value * 11.725mA) + 10.9mA)

/* LED2 Flash Brightness Register - 0x04 */
#define REG_FLASH2_BR_MASK		GENMASK(6, 0)
#define REG_FLASH2_BR_LVL_SHIFT		(0)
#define REG_FLASH2_BR_LVL_MASK		GENMASK(REG_FLASH2_BR_LVL_SHIFT+6, REG_FLASH2_BR_LVL_SHIFT)
#define REG_FLASH2_BR_LVL(lvl)		(((lvl) << REG_FLASH2_BR_LVL_SHIFT) & REG_FLASH2_BR_LVL_MASK)
	//Current method: Same as FLASH1

/* LED1 Torch Brightness Register - 0x05 */
#define REG_TORCH1_BR_MASK		GENMASK(7, 0)
#define REG_TORCH1_BR_OVERRIDE_SHIFT	(7)
#define REG_TORCH1_BR_OVERRIDE_MASK	BIT_MASK(REG_TORCH1_BR_OVERRIDE_SHIFT)
#define REG_TORCH1_BR_OVERRIDE_ENABLE	BIT(REG_TORCH1_BR_OVERRIDE_SHIFT)
#define REG_TORCH1_BR_OVERRIDE_DISABLE	(~REG_TORCH1_BR_OVERRIDE_ENABLE & REG_TORCH1_BR_OVERRIDE_MASK)
#define REG_TORCH1_BR_LVL_SHIFT		(0)
#define REG_TORCH1_BR_LVL_MASK		GENMASK(REG_TORCH1_BR_LVL_SHIFT+6, REG_TORCH1_BR_LVL_SHIFT)
#define REG_TORCH1_BR_LVL(lvl)		(((lvl) << REG_TORCH1_BR_LVL_SHIFT) & REG_TORCH1_BR_LVL_MASK)
	//Current method:
	//0.977mA~179mA or 1.954mA~360mA(TT)
	//mA ~= ((value * 1.4mA(or 2.8mA for TT)) + 0.977mA(or 1.954mA for TT))

/* LED2 Torch Brightness Register - 0x06 */
#define REG_TORCH2_BR_MASK		GENMASK(6, 0)
#define REG_TORCH2_BR_LVL_SHIFT		(0)
#define REG_TORCH2_BR_LVL_MASK		GENMASK(REG_TORCH2_BR_LVL_SHIFT+6, REG_TORCH2_BR_LVL_SHIFT)
#define REG_TORCH2_BR_LVL(lvl)		(((lvl) << REG_TORCH2_BR_LVL_SHIFT) & REG_TORCH2_BR_LVL_MASK)
	//Current method: Same as TORCH1

/* Boost Configuration Register - 0x07 */
#define REG_BOOST_MASK			GENMASK(7, 0)
#define REG_BOOST_SOFT_RESET_SHIFT	(7)
#define REG_BOOST_SOFT_RESET_MASK	BIT_MASK(REG_BOOST_SOFT_RESET_SHIFT)
#define REG_BOOST_SOFT_RESET		BIT(REG_BOOST_SOFT_RESET_SHIFT)
#define REG_BOOST_RFU_SHIFT		(4)
#define REG_BOOST_RFU_MASK		GENMASK(REG_BOOST_RFU_SHIFT+2, REG_BOOST_RFU_SHIFT)
#define REG_BOOST_LED_SHORT_SHIFT	(3)
#define REG_BOOST_LED_SHORT_MASK	BIT_MASK(REG_BOOST_LED_SHORT_SHIFT)
#define REG_BOOST_LED_SHORT_ENABLE	BIT(REG_BOOST_LED_SHORT_SHIFT)
#define REG_BOOST_LED_SHORT_DISABLE	(~REG_BOOST_LED_SHORT_ENABLE & REG_BOOST_LED_SHORT_MASK)
#define REG_BOOST_MODE_SHIFT		(2)
#define REG_BOOST_MODE_MASK		BIT_MASK(REG_BOOST_MODE_SHIFT)
#define REG_BOOST_PASS_MODE		BIT(REG_BOOST_MODE_SHIFT)
#define REG_BOOST_NORMAL_MODE		(~REG_BOOST_PASS_MODE & REG_BOOST_MODE_MASK)
#define REG_BOOST_FREQ_SEL_SHIFT	(1)
#define REG_BOOST_FREQ_SEL_MASK		BIT_MASK(REG_BOOST_FREQ_SEL_SHIFT)
#define REG_BOOST_FREQ_4MHZ		BIT(REG_BOOST_FREQ_SEL_SHIFT)
#define REG_BOOST_FREQ_2MHZ		(~REG_BOOST_FREQ_4MHZ & REG_BOOST_FREQ_SEL_MASK)
#define REG_BOOST_CLIMIT_SHIFT		(0)
#define REG_BOOST_CLIMIT_MASK		BIT_MASK(REG_BOOST_CLIMIT_SHIFT)
#define REG_BOOST_CLIMIT_2P8A		BIT(REG_BOOST_CLIMIT_SHIFT)
#define REG_BOOST_CLIMIT_1P9A		(~REG_BOOST_CLIMIT_2P8A & REG_BOOST_CLIMIT_MASK)

enum led_fault_type {
	LED_DETECT_DISABLE = 0,
	LED_DETECT_ENABLE,
};

enum boost_mode_type {
	BOOST_NORMAL = 0,
	BOOST_PASS_ONLY,
};

enum boost_freq_type {
	BOOST_FREQ_2MHZ = 0,
	BOOST_FREQ_4MHZ,
};

enum boost_climit_type {
	BOOST_CLIMIT_1P9A = 0,
	BOOST_CLIMIT_2P8A,
};

/* Timing Configuration Register - 0x08 */
#define REG_TIME_MASK			GENMASK(6, 0)
#define REG_TIME_TORCH_RAMP_SHIFT	(4)
#define REG_TIME_TORCH_RAMP_MASK	GENMASK(REG_TIME_TORCH_RAMP_SHIFT+2, REG_TIME_TORCH_RAMP_SHIFT)
#define REG_TIME_TORCH_RAMP(ramp)	(((ramp) << REG_TIME_TORCH_RAMP_SHIFT) & REG_TIME_TORCH_RAMP_MASK)
#define REG_TIME_FLASH_TIMEOUT_SHIFT	(0)
#define REG_TIME_FLASH_TIMEOUT_MASK	GENMASK(REG_TIME_FLASH_TIMEOUT_SHIFT+3, REG_TIME_FLASH_TIMEOUT_SHIFT)
#define REG_TIME_FLASH_TIMEOUT(timeout)	(((timeout) << REG_TIME_FLASH_TIMEOUT_SHIFT) & REG_TIME_FLASH_TIMEOUT_MASK)

enum torch_ramp_time {
	TORCH_NO_RAMP = 0,
	TORCH_RAMP_1MS,		//default
	TORCH_RAMP_32MS,
	TORCH_RAMP_64MS,
	TORCH_RAMP_128MS,
	TORCH_RAMP_256MS,
	TORCH_RAMP_512MS,
	TORCH_RAMP_1024MS,

	NUM_OF_TORCH_RAMP_TIME
};

enum flash_timeout_duration {
	TIMEOUT_10MS = 0,
	TIMEOUT_20MS,
	TIMEOUT_30MS,
	TIMEOUT_40MS,
	TIMEOUT_50MS,
	TIMEOUT_60MS,
	TIMEOUT_70MS,
	TIMEOUT_80MS,
	TIMEOUT_90MS,
	TIMEOUT_100MS,
	TIMEOUT_150MS,		//default
	TIMEOUT_200MS,
	TIMEOUT_250MS,
	TIMEOUT_300MS,
	TIMEOUT_350MS,
	TIMEOUT_400MS,

	NUM_OF_TIMEOUT
};

enum tt_flash_timeout_duration {
	TT_TIMEOUT_40MS = 0,
	TT_TIMEOUT_80MS,
	TT_TIMEOUT_120MS,
	TT_TIMEOUT_160MS,
	TT_TIMEOUT_200MS,
	TT_TIMEOUT_240MS,
	TT_TIMEOUT_280MS,
	TT_TIMEOUT_320MS,
	TT_TIMEOUT_360MS,
	TT_TIMEOUT_400MS,
	TT_TIMEOUT_600MS,	//default
	TT_TIMEOUT_800MS,
	TT_TIMEOUT_1000MS,
	TT_TIMEOUT_1200MS,
	TT_TIMEOUT_1400MS,
	TT_TIMEOUT_1600MS,

	NUM_OF_TT_TIMEOUT
};

const unsigned int torch_ramp_time_ms[NUM_OF_TORCH_RAMP_TIME] = {
	0, 1, 32, 64, 128, 256, 512, 1024
};

const unsigned int flash_timeout_ms[NUM_OF_TIMEOUT] = {
	10, 20, 30, 40, 50, 60, 70, 80,
	90, 100, 150, 200, 250, 300, 350, 400
};

unsigned int tt_flash_timeout_ms[NUM_OF_TT_TIMEOUT] = {
	40, 80, 120, 160, 200, 240, 280, 320,
	360, 400, 600, 800, 1000, 1200, 1400, 1600
};

/* TEMP Register - 0x09 */
#define REG_TEMP_MASK			GENMASK(6, 0)
#define REG_TEMP_TORCH_POL_SHIFT	(6)
#define REG_TEMP_TORCH_POL_MASK		BIT_MASK(REG_TEMP_TORCH_POL_SHIFT)
#define REG_TEMP_TORCH_POL_LOW		BIT(REG_TEMP_TORCH_POL_SHIFT)
#define REG_TEMP_TORCH_POL_HIGH		(~REG_TEMP_TORCH_POL_LOW & REG_TEMP_TORCH_POL_MASK)
#define REG_TEMP_NTC_OPEN_SHIFT		(5)
#define REG_TEMP_NTC_OPEN_MASK		BIT_MASK(REG_TEMP_NTC_OPEN_SHIFT)
#define REG_TEMP_NTC_OPEN_ENABLE	BIT(REG_TEMP_NTC_OPEN_SHIFT)
#define REG_TEMP_NTC_OPEN_DISABLE	(~REG_TEMP_NTC_OPEN_ENABLE & REG_TEMP_NTC_OPEN_MASK)
#define REG_TEMP_NTC_SHORT_SHIFT	(4)
#define REG_TEMP_NTC_SHORT_MASK		BIT_MASK(REG_TEMP_NTC_SHORT_SHIFT)
#define REG_TEMP_NTC_SHORT_ENABLE	BIT(REG_TEMP_NTC_SHORT_SHIFT)
#define REG_TEMP_NTC_SHORT_DISABLE	(~REG_TEMP_NTC_SHORT_ENABLE & REG_TEMP_NTC_SHORT_MASK)
#define REG_TEMP_DETECT_VTH_SHIFT	(1)
#define REG_TEMP_DETECT_VTH_MASK	GENMASK(REG_TEMP_DETECT_VTH_SHIFT+2, REG_TEMP_DETECT_VTH_SHIFT)
#define REG_TEMP_DETECT_VTH(thresh)	(((thresh) << REG_TEMP_DETECT_VTH_SHIFT) & REG_TEMP_DETECT_VTH_MASK)
#define REG_TEMP_TORCH_TEMP_SEL_SHIFT	(0)
#define REG_TEMP_TORCH_TEMP_SEL_MASK	BIT_MASK(REG_TEMP_TORCH_TEMP_SEL_SHIFT)
#define	REG_TEMP_TORCH_SELECT		BIT(REG_TEMP_TORCH_TEMP_SEL_SHIFT)
#define REG_TEMP_TEMP_SELECT		(~REG_TEMP_TORCH_SELECT & REG_TEMP_TORCH_TEMP_SEL_MASK)

enum temp_detect_voltage_threshold {
	TEMP_DETECT_200MV = 0,
	TEMP_DETECT_300MV,
	TEMP_DETECT_400MV,
	TEMP_DETECT_500MV,
	TEMP_DETECT_600MV,	//default
	TEMP_DETECT_700MV,
	TEMP_DETECT_800MV,
	TEMP_DETECT_900MV,

	NUM_OF_TEMP_DETECT_TH
};

const unsigned int temp_detect_threshold_mv[NUM_OF_TEMP_DETECT_TH] = {
	200, 300, 400, 500, 600, 700, 800, 900
};

/* Flag1 Register - 0x0A */
#define REG_FLAG1_MASK			GENMASK(7, 0)
#define REG_FLAG1_TX_SHIFT		(7)
#define REG_FLAG1_TX_MASK		BIT_MASK(REG_FLAG1_TX_SHIFT)
#define REG_FLAG1_TX			BIT(REG_FLAG1_TX_SHIFT)
#define REG_FLAG1_VOUT_SHORT_SHIFT	(6)
#define REG_FLAG1_VOUT_SHORT_MASK	BIT_MASK(REG_FLAG1_VOUT_SHORT_SHIFT)
#define REG_FLAG1_VOUT_SHORT		BIT(REG_FLAG1_VOUT_SHORT_SHIFT)
#define REG_FLAG1_LED1_SHORT_SHIFT	(5)
#define REG_FLAG1_LED1_SHORT_MASK	BIT_MASK(REG_FLAG1_LED1_SHORT_SHIFT)
#define REG_FLAG1_LED1_SHORT		BIT(REG_FLAG1_LED1_SHORT_SHIFT)
#define REG_FLAG1_LED2_SHORT_SHIFT	(4)
#define REG_FLAG1_LED2_SHORT_MASK	BIT_MASK(REG_FLAG1_LED2_SHORT_SHIFT)
#define REG_FLAG1_LED2_SHORT		BIT(REG_FLAG1_LED2_SHORT_SHIFT)
#define REG_FLAG1_CLIMIT_SHIFT		(3)
#define REG_FLAG1_CLIMIT_MASK		BIT_MASK(REG_FLAG1_CLIMIT_SHIFT)
#define REG_FLAG1_CLIMIT		BIT(REG_FLAG1_CLIMIT_SHIFT)
#define REG_FLAG1_TSHUTDOWN_SHIFT	(2)
#define REG_FLAG1_TSHUTDOWN_MASK	BIT_MASK(REG_FLAG1_TSHUTDOWN_SHIFT)
#define REG_FLAG1_TSHUTDOWN		BIT(REG_FLAG1_TSHUTDOWN_SHIFT)
#define REG_FLAG1_UVLO_SHIFT		(1)
#define REG_FLAG1_UVLO_MASK		BIT_MASK(REG_FLAG1_UVLO_SHIFT)
#define REG_FLAG1_UVLO			BIT(REG_FLAG1_UVLO_SHIFT)
#define REG_FLAG1_FALSH_TIMEOUT_SHIFT	(0)
#define REG_FLAG1_FALSH_TIMEOUT_MASK	BIT_MASK(REG_FLAG1_FALSH_TIMEOUT_SHIFT)
#define REG_FLAG1_FALSH_TIMEOUT		BIT(REG_FLAG1_FALSH_TIMEOUT_SHIFT)

/* Flag2 Register - 0x0B */
#define REG_FLAG2_MASK			GENMASK(4, 0)
#define REG_FLAG2_NTC_SHORT_SHIFT	(4)
#define REG_FLAG2_NTC_SHORT_MASK	BIT_MASK(REG_FLAG2_NTC_SHORT_SHIFT)
#define REG_FLAG2_NTC_SHORT		BIT(REG_FLAG2_NTC_SHORT_SHIFT)
#define REG_FLAG2_NTC_OPEN_SHIFT	(3)
#define REG_FLAG2_NTC_OPEN_MASK		BIT_MASK(REG_FLAG2_NTC_OPEN_SHIFT)
#define REG_FLAG2_NTC_OPEN		BIT(REG_FLAG2_NTC_OPEN_SHIFT)
#define REG_FLAG2_IVFM_TRIP_SHIFT	(2)
#define REG_FLAG2_IVFM_TRIP_MASK	BIT_MASK(REG_FLAG2_IVFM_TRIP_SHIFT)
#define REG_FLAG2_IVFM_TRIP		BIT(REG_FLAG2_IVFM_TRIP_SHIFT)
#define REG_FLAG2_OVP_SHIFT		(1)
#define REG_FLAG2_OVP_MASK		BIT_MASK(REG_FLAG2_OVP_SHIFT)
#define REG_FLAG2_OVP			BIT(REG_FLAG2_OVP_SHIFT)
#define REG_FLAG2_TEMP_TRIP_SHIFT	(0)
#define REG_FLAG2_TEMP_TRIP_MASK	BIT_MASK(REG_FLAG2_TEMP_TRIP_SHIFT)
#define REG_FLAG2_TEMP_TRIP		BIT(REG_FLAG2_TEMP_TRIP_SHIFT)


/* Device ID Register - 0x0C */
#define REG_ID_MASK			GENMASK(5, 0)
#define REG_ID_DEVICE_SHIFT		(3)
#define REG_ID_DEVICE_MASK		GENMASK(REG_ID_DEVICE_SHIFT+2, REG_ID_DEVICE_SHIFT)
#define REG_ID_SILICON_REV_SHIFT	(0)
#define REG_ID_SILICON_REV_MASK		GENMASK(REG_ID_SILICON_REV_SHIFT+2, REG_ID_SILICON_REV_SHIFT)

enum lm3644_revision {
	REV_LM3644 = 0x02,
	REV_LM3644TT = 0x04,
};

/* Last Flash Register - 0x0D */
#define REG_LAST_FLASH_SHIFT		(0)
#define REG_LAST_FLASH_MASK		GENMASK(REG_LAST_FLASH_SHIFT+6, REG_LAST_FLASH_SHIFT)
	// Iled = I(flash - target) x ((Reg_value + 1) / 128)

#endif /* end of _LM3644_H */
